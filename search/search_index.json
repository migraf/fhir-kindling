{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Python library for interacting with HL7 FHIR servers and resources. Resource validation and parsing powered by pydantic and the fhir.resources library. Provides a simple interface for synchronous and asynchronous CRUD operations for resources and bundles,  as well as resource transfer between servers. Datascience features include flattening of resources and bundles into tabular format (pandas dataframe) and plotting  methods for resources and bundles can optionally be included with the <code>ds</code> extra.</p> <p>Warning</p> <p>Under construction. This documentation is not complete.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Connect to FHIR (Version R4) servers using different auth methods</li> <li>Sync/async CRUD operations for bundles and resource</li> <li>Resource transfer between servers</li> <li>Resource/Bundle serialization to CSV</li> <li>Resource generation for synthetic data sets</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the package via pypi without any extra dependencies, use the following command: <pre><code>pip install fhir_kindling\n</code></pre></p> <pre><code>poetry add fhir_kindling\n</code></pre>"},{"location":"#extras-optional","title":"Extras (optional)","text":"<p>Fhir kindling can be used with the following extras:</p>"},{"location":"#data-science","title":"Data science","text":"<p>Install the package with the <code>ds</code> extra to get the following features:</p> <ul> <li><code>flatten</code> method for flattening a resource into a tabular format (pandas dataframe)</li> <li><code>flatten_bundle</code> method for flattening a bundle into a tabular format (pandas dataframe)</li> <li>Plotly based plotting methods for resources and bundles</li> </ul> <pre><code>pip install fhir_kindling[ds]\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#connecting-to-a-fhir-server","title":"Connecting to a FHIR server","text":"<pre><code>from fhir_kindling import FhirServer\n\n# Connect with basic auth \nbasic_auth_server = FhirServer(\"https://fhir.server/fhir\", username=\"admin\", password=\"admin\")\n# Connect with static token\ntoken_server = FhirServer(\"https://fhir.server/fhir\", token=\"your_token\")\n\n# Connect using oauth2/oidc\noidc_server = FhirServer(\"https://fhir.server/fhir\", client_id=\"client_id\", client_secret=\"secret\", \n                         oidc_provider_url=\"url\")\n\n# Print the server's capability statement\nprint(basic_auth_server.capabilities)\n</code></pre>"},{"location":"#query-resources-from-the-server","title":"Query resources from the server","text":"<pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.patient import Patient\n\n\n# Connect using oauth2/oidc\noidc_server = FhirServer(\"https://fhir.server/fhir\", client_id=\"client_id\", client_secret=\"secret\",\n                         oidc_provider_url=\"url\")\n\n# query all patients on the server\nquery = oidc_server.query(Patient, output_format=\"json\").all()\nprint(query.response)\n\n# Query resources based on name of resource\nquery = oidc_server.query(\"Patient\", output_format=\"json\").all()\nprint(query.response)\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>All the FHIR resource validation is done via the fhir.resources package.</p>"},{"location":"add/","title":"Upload data to a fhir server","text":"<p>Using this library resources can be added to a FHIR server as single resources, lists or as predefined  bundles by using its REST API.</p> <p>Note</p> <p>As with all the methods of the library, there are asynchronous and synchronous versions of the methods presented here. Simply add the <code>await</code> keyword and append <code>_async</code> to the method name to use the asynchronous version.</p>"},{"location":"add/#uploading-a-single-resource","title":"Uploading a single resource","text":"<p>Uploading a single resource is done by calling the <code>add</code> function on a FHIR server. The resource can be specified as a pydantic model from the <code>fhir.resources</code> package or as a dictionary.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.patient import Patient\n\npatient = Patient(\n    name=[\n        {\n            \"family\": \"Smith\",\n            \"given\": [\"John\"],\n        },\n    ],\n    birthdate=\"1955-05-05\"\n)\npatient_dict = patient.dict()\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\nresponse = fhir_server.add(resource=patient) # identical\nresponse = fhir_server.add(resource=patient_dict) # identical\n</code></pre>"},{"location":"add/#uploading-a-list-of-resources","title":"Uploading a list of resources","text":"<p>Uploading a list of resources is done by calling the <code>add_all</code> function on a FHIR server and passing a list of resources. The resources can be specified as a pydantic models from the <code>fhir.resources</code> package or as a dictionaries.</p> <p>When uploading a large amounts of resources, the upload will be batched into smaller transactions to avoid timeouts. The batch size can be specified with the <code>batch_size</code> argument. Optionally, a progress bar can be displayed by setting the <code>display</code> argument to <code>True</code>.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.patient import Patient\n\npatient = Patient(\n    name=[\n        {\n            \"family\": \"Smith\",\n            \"given\": [\"John\"],\n        },\n    ],\n    birthdate=\"1955-05-05\"\n)\n# create a list of 10000 patients\npatients = [patient for _ in range(10000)]\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\n\n# upload the list of patients and display a progress bar\nresponse = fhir_server.add_all(resources=patients, batch_size=1000, display=True)\n</code></pre>"},{"location":"add/#uploading-a-bundle","title":"Uploading a bundle","text":"<p>Uploading a bundle is done by calling the <code>add_bundle</code> function on a FHIR server and passing a bundle object to the method. Once again, the bundle can be specified as a pydantic model from the <code>fhir.resources</code> package or as a dictionary.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.bundle import Bundle, BundleEntry, BundleEntryRequest\nfrom fhir.resources.patient import Patient\n\npatient = Patient(\n    name=[\n        {\n            \"family\": \"Smith\",\n            \"given\": [\"John\"],\n        },\n    ],\n    birthdate=\"1955-05-05\"\n)\n# create a list of 10000 patients\npatients = [patient for _ in range(10000)]\n\nbundle = Bundle(\n    type=\"transaction\",\n    entry=[\n        BundleEntry(\n            resource=patient,\n            request=BundleEntryRequest(\n                method=\"POST\",\n                url=\"Patient\",\n            ),\n        )\n        for patient in patients\n    ],\n)\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\n\nresponse = fhir_server.add_bundle(bundle=bundle) \n</code></pre>"},{"location":"add/#upload-api","title":"Upload API","text":""},{"location":"add/#fhir_kindling.fhir_server.fhir_server.FhirServer.add","title":"<code>add(self, resource)</code>","text":"<p>Upload a resource to the server</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Union[fhir.resources.resource.Resource, dict]</code> <p>dictionary containing the resource or FHIR resource object to be uploaded to the server</p> required <p>Returns:</p> Type Description <code>ResourceCreateResponse</code> <p>CreateResponse containing the server response and the resource that was uploaded</p>"},{"location":"add/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_all","title":"<code>add_all(self, resources, batch_size=1000, display=True)</code>","text":"<p>Upload a list of resources to the server, after packaging them into a bundle</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, dict]]</code> <p>list of resources to upload to the server, either dictionary or FHIR resource objects</p> required <code>batch_size</code> <code>int</code> <p>maximum number of resources to upload in one bundle</p> <code>1000</code> <code>display</code> <code>bool</code> <p>whether to display a progress bar when the upload is batched</p> <code>True</code> <p>Returns:</p> Type Description <code>BundleCreateResponse</code> <p>Bundle create response from the fhir server</p>"},{"location":"add/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_all_async","title":"<code>add_all_async(self, resources, batch_size=5000, display=True)</code>  <code>async</code>","text":"<p>Asynchronously upload a list of resources to the server, after packaging them into a bundle</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, dict]]</code> <p>list of resources to upload to the server, either dictionary or FHIR resource objects</p> required <code>batch_size</code> <code>int</code> <p>maximum number of resources to upload in one bundle</p> <code>5000</code> <code>display</code> <code>bool</code> <p>whether to display a progress bar when the upload is batched</p> <code>True</code> <p>Returns: Bundle create response from the fhir server</p>"},{"location":"add/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_async","title":"<code>add_async(self, resource)</code>  <code>async</code>","text":"<p>Asynchronously upload a resource to the server</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Union[fhir.resources.resource.Resource, dict]</code> <p>dictionary containing the resource or FHIR resource object to be uploaded to the server</p> required <p>Returns:</p> Type Description <code>ResourceCreateResponse</code> <p>CreateResponse containing the server response and the resource that was uploaded</p>"},{"location":"add/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_bundle","title":"<code>add_bundle(self, bundle, validate=True)</code>","text":"<p>Upload a bundle to the server :param bundle: str, dict or Bundle object to upload to the server :param validate: whether to validate the entries in the bundle :return: BundleCreateResponse from the fhir server containing the server assigned ids of the resources in the bundle</p>"},{"location":"add/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_bundle_async","title":"<code>add_bundle_async(self, bundle, validate_entries=True)</code>  <code>async</code>","text":"<p>Asynchronously upload a bundle to the server :param bundle: str, dict or Bundle object to upload to the server :param validate_entries: whether to validate the entries in the bundle :return: BundleCreateResponse from the fhir server containing the server assigned ids of the resources in the bundle</p>"},{"location":"api/","title":"API docs","text":""},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer","title":"<code> FhirServer        </code>","text":""},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.capabilities","title":"<code>capabilities: CapabilityStatement</code>  <code>property</code> <code>readonly</code>","text":"<p>Get the capabilities statement for the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.rest_resources","title":"<code>rest_resources: List[str]</code>  <code>property</code> <code>readonly</code>","text":"<p>Get the list of resources available on the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.headers","title":"<code>headers</code>  <code>property</code> <code>readonly</code>","text":""},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.auth","title":"<code>auth</code>  <code>property</code> <code>readonly</code>","text":""},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.__init__","title":"<code>__init__(self, api_address, username=None, password=None, token=None, client_id=None, client_secret=None, oidc_provider_url=None, auth=None, headers=None, proxies=None, timeout=None, fhir_server_type='hapi', retry_status_codes=None, retryable_methods=None, max_atttempts=5, max_backoff_wait=60, backoff_factor=0.1, jitter_ratio=0.1, respect_retry_after_header=True)</code>  <code>special</code>","text":"<p>Initialize a FHIR server connection</p> <p>Parameters:</p> Name Type Description Default <code>api_address</code> <code>str</code> <p>the base endpoint of the fhir server REST API</p> required <code>username</code> <code>Optional[str]</code> <p>username for basic auth</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>password for basic auth</p> <code>None</code> <code>token</code> <code>Optional[str]</code> <p>token for static token auth</p> <code>None</code> <code>client_id</code> <code>Optional[str]</code> <p>client id for oauth2</p> <code>None</code> <code>client_secret</code> <code>Optional[str]</code> <p>client secret for oauth2</p> <code>None</code> <code>oidc_provider_url</code> <code>Optional[str]</code> <p>provider url for oauth2</p> <code>None</code> <code>auth</code> <code>Optional[httpx.Auth]</code> <p>optional auth object to authenticate against a server</p> <code>None</code> <code>headers</code> <code>Optional[dict]</code> <p>optional additional headers to be added to the session</p> <code>None</code> <code>proxies</code> <code>Union[dict, str]</code> <p>optional proxies to be added to the session</p> <code>None</code> <code>timeout</code> <code>Optional[int]</code> <p>optional timeout for the session default is None</p> <code>None</code> <code>fhir_server_type</code> <code>str</code> <p>type of fhir server (hapi, blaze, etc.)</p> <code>'hapi'</code> <code>retry_status_codes</code> <code>Optional[Iterable[int]]</code> <p>optional list of status codes to retry on</p> <code>None</code> <code>max_atttempts</code> <code>int</code> <p>optional number of times to retry</p> <code>5</code> <code>retry_wait</code> <p>optional number of seconds to wait between retries</p> required"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.from_env","title":"<code>from_env(no_auth=False)</code>  <code>classmethod</code>","text":""},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.query","title":"<code>query(self, resource=None, query_string=None, query_parameters=None, output_format='json')</code>","text":"<p>Initialize a FHIR query against the server with the given resource, query parameters or query string</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>the output format to request from the fhir server (json or xml) defaults to json</p> <code>'json'</code> <code>query_string</code> <code>str</code> <p>preformatted query string to execute against the servers REST API</p> <code>None</code> <code>query_parameters</code> <code>FhirQueryParameters</code> <p>optionally pass in a query parameters object to use for the query</p> <code>None</code> <code>resource</code> <code>Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, str]</code> <p>the FHIR resource to query from the server</p> <code>None</code> <p>Returns:</p> Type Description <code>FhirQuerySync</code> <p>a FhirQuerySync object that can be further modified with filters and conditions before being executed against the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.query_async","title":"<code>query_async(self, resource=None, query_string=None, query_parameters=None, output_format='json')</code>","text":"<p>Initialize an asynchronous FHIR query against the server with the given resource, query parameters or query string</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>the output format to request from the fhir server (json or xml) defaults to json</p> <code>'json'</code> <code>query_string</code> <code>str</code> <p>preformatted query string to execute against the servers REST API</p> <code>None</code> <code>query_parameters</code> <code>FhirQueryParameters</code> <p>optionally pass in a query parameters object to use for the query</p> <code>None</code> <code>resource</code> <code>Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, str]</code> <p>the FHIR resource to query from the server</p> <code>None</code> <p>Returns:</p> Type Description <code>FhirQueryAsync</code> <p>a FhirQueryAsync object that can be further modified with filters and conditions before being executed against the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.raw_query","title":"<code>raw_query(self, query_string, output_format='json')</code>","text":"<p>Execute a raw query string against the server</p> <p>Parameters:</p> Name Type Description Default <code>query_string</code> <code>str</code> required <code>output_format</code> <code>str</code> <code>'json'</code> <p>Returns:</p> Type Description <code>FhirQuerySync</code> <p>a FhirQuerySync object that can be further modified with filters and conditions before being executed against the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.raw_query_async","title":"<code>raw_query_async(self, query_string, output_format='json')</code>","text":"<p>Asynchronously Execute a raw query string against the server</p> <p>Parameters:</p> Name Type Description Default <code>query_string</code> <code>str</code> <p>query string defining the query to execute</p> required <code>output_format</code> <code>str</code> <p>the output format to request from the fhir server (json or xml) defaults to json</p> <code>'json'</code> <p>Returns:</p> Type Description <code>FhirQueryAsync</code> <p>a FhirQueryAsync object that can be further modified with filters and conditions before being executed against the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.get","title":"<code>get(self, reference)</code>","text":"<p>Get a resource from the server specified by the given reference {ResourceType}/{id}</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>Union[str, fhir.resources.reference.Reference]</code> <p>reference to the resource, either a Reference object or a string of the form {ResourceType}/{id}</p> required <p>Returns:</p> Type Description <code>FHIRAbstractModel</code> <p>the resource from the server specified by the reference</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.get_async","title":"<code>get_async(self, reference)</code>  <code>async</code>","text":"<p>Asynchronously get a resource from the server specified by the given reference {ResourceType}/{id}</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>Union[str, fhir.resources.reference.Reference]</code> <p>reference to the resource, either a Reference object or a string of the form {ResourceType}/{id}</p> required <p>Returns:</p> Type Description <code>FHIRAbstractModel</code> <p>the resource from the server specified by the reference</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.get_many","title":"<code>get_many(self, references)</code>","text":"<p>Get a list of resources from the server specified by the given references</p> <p>Parameters:</p> Name Type Description Default <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>list of references to the resources, either a Reference object or a string of the form <code>{ResourceType}/{id}</code></p> required <p>Returns:</p> Type Description <code>List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code> <p>list of resources corresponding to the references</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.get_many_async","title":"<code>get_many_async(self, references)</code>  <code>async</code>","text":"<p>Asynchronously get a list of resources from the server specified by the given references</p> <p>Parameters:</p> Name Type Description Default <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>list of references to the resources, either a Reference object or a string of the form <code>{ResourceType}/{id}</code></p> required <p>Returns:</p> Type Description <code>List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code> <p>list of resources corresponding to the references</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add","title":"<code>add(self, resource)</code>","text":"<p>Upload a resource to the server</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Union[fhir.resources.resource.Resource, dict]</code> <p>dictionary containing the resource or FHIR resource object to be uploaded to the server</p> required <p>Returns:</p> Type Description <code>ResourceCreateResponse</code> <p>CreateResponse containing the server response and the resource that was uploaded</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_async","title":"<code>add_async(self, resource)</code>  <code>async</code>","text":"<p>Asynchronously upload a resource to the server</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Union[fhir.resources.resource.Resource, dict]</code> <p>dictionary containing the resource or FHIR resource object to be uploaded to the server</p> required <p>Returns:</p> Type Description <code>ResourceCreateResponse</code> <p>CreateResponse containing the server response and the resource that was uploaded</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_all","title":"<code>add_all(self, resources, batch_size=1000, display=True)</code>","text":"<p>Upload a list of resources to the server, after packaging them into a bundle</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, dict]]</code> <p>list of resources to upload to the server, either dictionary or FHIR resource objects</p> required <code>batch_size</code> <code>int</code> <p>maximum number of resources to upload in one bundle</p> <code>1000</code> <code>display</code> <code>bool</code> <p>whether to display a progress bar when the upload is batched</p> <code>True</code> <p>Returns:</p> Type Description <code>BundleCreateResponse</code> <p>Bundle create response from the fhir server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_all_async","title":"<code>add_all_async(self, resources, batch_size=5000, display=True)</code>  <code>async</code>","text":"<p>Asynchronously upload a list of resources to the server, after packaging them into a bundle</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, dict]]</code> <p>list of resources to upload to the server, either dictionary or FHIR resource objects</p> required <code>batch_size</code> <code>int</code> <p>maximum number of resources to upload in one bundle</p> <code>5000</code> <code>display</code> <code>bool</code> <p>whether to display a progress bar when the upload is batched</p> <code>True</code> <p>Returns: Bundle create response from the fhir server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_bundle","title":"<code>add_bundle(self, bundle, validate=True)</code>","text":"<p>Upload a bundle to the server :param bundle: str, dict or Bundle object to upload to the server :param validate: whether to validate the entries in the bundle :return: BundleCreateResponse from the fhir server containing the server assigned ids of the resources in the bundle</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.add_bundle_async","title":"<code>add_bundle_async(self, bundle, validate_entries=True)</code>  <code>async</code>","text":"<p>Asynchronously upload a bundle to the server :param bundle: str, dict or Bundle object to upload to the server :param validate_entries: whether to validate the entries in the bundle :return: BundleCreateResponse from the fhir server containing the server assigned ids of the resources in the bundle</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.update","title":"<code>update(self, resources)</code>","text":"<p>Update a list of resources that exist on the server</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, dict]]</code> <p>List of updated resources coming to send to the server</p> required <p>Returns: Bundle update response from the fhir server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.update_async","title":"<code>update_async(self, resources)</code>  <code>async</code>","text":""},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.delete","title":"<code>delete(self, resources=None, references=None, query=None)</code>","text":"<p>Delete resources from the server. Either resources, references or a query must be specified.</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, dict]]</code> <p>Resources coming from the server containing an id to delete</p> <code>None</code> <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>references {Resource}/{id} to delete</p> <code>None</code> <code>query</code> <code>FhirQuerySync</code> <p>query to use to find resources to delete</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.delete_async","title":"<code>delete_async(self, resources=None, references=None, query=None)</code>  <code>async</code>","text":"<p>Asynchronously delete resources from the server. Either resources, references or a query must be specified.</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, dict]]</code> <p>Resources coming from the server containing an id to delete</p> <code>None</code> <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>references {Resource}/{id} to delete</p> <code>None</code> <code>query</code> <code>FhirQueryAsync</code> <p>query to use to find resources to delete</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.transfer","title":"<code>transfer(self, target_server, query=None, resources=None, get_missing=True, record_linkage=True, display=False)</code>","text":"<p>Transfer resources from this server to another server while using server assigned ids and keeping referential integrity.</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>FhirServer</code> <p>FhirServer to transfer to</p> required <code>query</code> <code>FhirQuerySync</code> <p>FhirQuerySync to use to find resources to transfer</p> <code>None</code> <code>resources</code> <code>List[Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]]</code> <p>list of resources to transfer</p> <code>None</code> <code>get_missing</code> <code>bool</code> <p>whether to get missing references from the source server</p> <code>True</code> <code>record_linkage</code> <code>bool</code> <p>whether to record the linkage between the source and target server</p> <code>True</code> <code>display</code> <code>bool</code> <p>whether to display the progress bar</p> <code>False</code> <p>Returns:</p> Type Description <code>TransferResponse</code> <p>Transfer response for the transfer of the query result to the target server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.summary","title":"<code>summary(self, display=True)</code>","text":"<p>Create a summary for the server. Contains resource counts for all resources available on the server.</p> <p>Parameters:</p> Name Type Description Default <code>display</code> <code>bool</code> <p>whether to display a progress bar</p> <code>True</code> <p>Returns:</p> Type Description <code>ServerSummary</code> <p>ServerSummary containing resource counts for all resources available on the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.summary_async","title":"<code>summary_async(self, display=True)</code>  <code>async</code>","text":"<p>Asynchronously create a summary for the server. Contains resource counts for all resources available on the server.</p> <p>Parameters:</p> Name Type Description Default <code>display</code> <code>bool</code> <p>whether to display a progress bar</p> <code>True</code> <p>Returns:</p> Type Description <code>ServerSummary</code> <p>ServerSummary containing resource counts for all resources available on the server</p>"},{"location":"api/#fhir_kindling.fhir_server.fhir_server.FhirServer.__repr__","title":"<code>__repr__(self)</code>  <code>special</code>","text":""},{"location":"api/#fhir_kindling.fhir_query.query_sync.FhirQuerySync","title":"<code> FhirQuerySync            (FhirQueryBase)         </code>","text":""},{"location":"api/#fhir_kindling.fhir_query.query_sync.FhirQuerySync.__init__","title":"<code>__init__(self, base_url, resource=None, query_parameters=None, auth=None, headers=None, client=None, output_format='json', proxies=None)</code>  <code>special</code>","text":"<p>Initialize an sync FHIR query object.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL of the FHIR server to query.</p> required <code>resource</code> <code>Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, str]</code> <p>Base resource to build the query on. Defaults to None.</p> <code>None</code> <code>query_parameters</code> <code>FhirQueryParameters</code> <p>Query parameters object that fully describes a FHIR query. Defaults to None.</p> <code>None</code> <code>auth</code> <code>Auth</code> <p>httpx auth object to authenticate the requests. Defaults to None.</p> <code>None</code> <code>headers</code> <code>dict</code> <p>Optional additional headers to add to the request. Defaults to None.</p> <code>None</code> <code>output_format</code> <code>str</code> <p>Response format of the query. Defaults to \"json\".</p> <code>'json'</code> <code>client</code> <code>Client</code> <p>httpx Client passed from the server. Defaults to None.</p> <code>None</code> <code>proxies</code> <code>Union[str, dict]</code> <p>List of proxies to use. Defaults to None.</p> <code>None</code>"},{"location":"api/#fhir_kindling.fhir_query.query_sync.FhirQuerySync.all","title":"<code>all(self, page_callback=None, count=None)</code>","text":"<p>Execute the query and return all results matching the query parameters.</p> <p>Parameters:</p> Name Type Description Default <code>page_callback</code> <code>Union[Callable[[List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]], Any], Callable[[], Any]]</code> <p>if this argument is set the given callback function will be called for each page of results</p> <code>None</code> <code>count</code> <code>int</code> <p>number of results in a page, default value of 50 is used when page_callback is set but no count is</p> <code>None</code> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>QueryResponse object containing all resources matching the query, as well os optional included resources.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_sync.FhirQuerySync.limit","title":"<code>limit(self, n, page_callback=None, count=None)</code>","text":"<p>Execute the query and return the first n results matching the query parameters.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>number of resources to return</p> required <code>page_callback</code> <code>Union[Callable[[List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]], Any], Callable[[], Any]]</code> <p>if this argument is set the given callback function will be called for each page of results</p> <code>None</code> <code>count</code> <code>int</code> <p>number of results in a page, default value of 50 is used when page_callback is set but no count is</p> <code>None</code> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>QueryResponse object containing the first n resources matching the query, as well os optional included resources.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_sync.FhirQuerySync.first","title":"<code>first(self)</code>","text":"<p>Return the first resource matching the query parameters.</p> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>QueryResponse object containing the first resource matching the query</p>"},{"location":"api/#fhir_kindling.fhir_query.query_sync.FhirQuerySync.count","title":"<code>count(self)</code>","text":""},{"location":"api/#fhir_kindling.fhir_query.query_async.FhirQueryAsync","title":"<code> FhirQueryAsync            (FhirQueryBase)         </code>","text":""},{"location":"api/#fhir_kindling.fhir_query.query_async.FhirQueryAsync.__init__","title":"<code>__init__(self, base_url, resource=None, query_parameters=None, auth=None, headers=None, output_format='json', client=None, proxies=None)</code>  <code>special</code>","text":"<p>Initialize an async FHIR query object.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>Base URL of the FHIR server to query.</p> required <code>resource</code> <code>Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, str]</code> <p>Base resource to build the query on. Defaults to None.</p> <code>None</code> <code>query_parameters</code> <code>FhirQueryParameters</code> <p>Query parameters object that fully describes a FHIR query. Defaults to None.</p> <code>None</code> <code>auth</code> <code>Auth</code> <p>httpx auth object to authenticate the requests. Defaults to None.</p> <code>None</code> <code>headers</code> <code>dict</code> <p>Optional additional headers to add to the request. Defaults to None.</p> <code>None</code> <code>output_format</code> <code>str</code> <p>Response format of the query. Defaults to \"json\".</p> <code>'json'</code> <code>client</code> <code>AsyncClient</code> <p>httpx Client passed from the server. Defaults to None.</p> <code>None</code> <code>proxies</code> <code>Union[str, dict]</code> <p>List of proxies to use. Defaults to None.</p> <code>None</code>"},{"location":"api/#fhir_kindling.fhir_query.query_async.FhirQueryAsync.all","title":"<code>all(self, page_callback=None, count=None)</code>  <code>async</code>","text":"<p>Execute the query and return all results matching the query parameters.</p> <p>Parameters:</p> Name Type Description Default <code>page_callback</code> <code>Union[Callable[[List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]], Any], Callable[[], Any]]</code> <p>if this argument is set the given callback function will be called for each page of results</p> <code>None</code> <code>count</code> <code>int</code> <p>number of results in a page, default value of 50 is used when page_callback is set but no count is</p> <code>None</code> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>QueryResponse object containing all resources matching the query, as well os optional included resources.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_async.FhirQueryAsync.limit","title":"<code>limit(self, n, page_callback=None, count=None)</code>  <code>async</code>","text":"<p>Execute the query and return the first n results matching the query parameters.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>number of resources to return</p> required <code>page_callback</code> <code>Union[Callable[[List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]], Any], Callable[[], Any]]</code> <p>if this argument is set the given callback function will be called for each page of results</p> <code>None</code> <code>count</code> <code>int</code> <p>number of results in a page, default value of 50 is used when page_callback is set but no count is</p> <code>None</code> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>QueryResponse object containing the first n resources matching the query, as well os optional included resources.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_async.FhirQueryAsync.first","title":"<code>first(self)</code>  <code>async</code>","text":"<p>Return the first resource matching the query parameters.</p> <p>Returns:</p> Type Description <code>QueryResponse</code> <p>QueryResponse object containing the first resource matching the query</p>"},{"location":"api/#fhir_kindling.fhir_query.query_async.FhirQueryAsync.count","title":"<code>count(self)</code>  <code>async</code>","text":"<p>Return the number of resources matching the query parameters.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of resources matching the query</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse","title":"<code> QueryResponse        </code>","text":"<p>Response object for the results of a FHIR query executed against a FHIR server.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.resources","title":"<code>resources: List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code>  <code>property</code> <code>readonly</code>","text":"<p>List of primary resources returned by the server.</p> <p>Returns:</p> Type Description <code>List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code> <p>List of FHIRResourceModel objects returned by the server.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.included_resources","title":"<code>included_resources: List[fhir_kindling.fhir_query.query_response.IncludedResources]</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns the list of resources included in the search.</p> <p>Returns:</p> Type Description <code>List[fhir_kindling.fhir_query.query_response.IncludedResources]</code> <p>List of IncludeResources objects containing the resource type and the list of resources of this type included in the search</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.resource_list","title":"<code>resource_list: List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns a list of all resources returned by the server including the primary resources and the included resources.</p> <p>Returns:</p> Type Description <code>List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code> <p>List of FHIRResourceModel objects returned by the server.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.total","title":"<code>total: int</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns the total number of resources returned by the query.</p> <p>Returns:</p> Type Description <code>int</code> <p>Total number of resources matching the query.</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.__init__","title":"<code>__init__(self, response, query_params, output_format=&lt;OutputFormats.JSON: 'json'&gt;, limit=None, count=None)</code>  <code>special</code>","text":""},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.save","title":"<code>save(self, file_path, output_format='json')</code>","text":"<p>Save the response to a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, pathlib.Path]</code> <p>path to the file to save the response to.</p> required <code>output_format</code> <code>str</code> <p>output format one of xml|json</p> <code>'json'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/#fhir_kindling.fhir_query.query_response.QueryResponse.__repr__","title":"<code>__repr__(self)</code>  <code>special</code>","text":""},{"location":"benchmark/","title":"Benchmarking","text":"<p>Fhir kindling provides tooling to run reproducible benchmarks against FHIR servers. The benchmark cover common CRUD operations as well as FHIR search requests with increasing complexities. To perform these tests the benchmarking tool creates a synthetic dataset with configurable size that is used to populate the server. The benchmarking tool then performs the operations against the server and records the time it took to complete each operation. Dataset size and the number of attempts made for each step in the benchmark can be configured.</p> <p>After the benchmark is successfully run the the results are stored as a JSON file and also plotted as a graph and saved as a PNG file.</p>"},{"location":"benchmark/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker(for preconfigured benchmarks)</li> <li>Fhir kindling installed</li> </ul>"},{"location":"benchmark/#run-preconfigured-benchmarks","title":"Run preconfigured benchmarks","text":"<p>To easily test how the most common fhir implementations perform on your machine you can use the preconfigured benchmarks.</p> <p>First clone the repository on the machine you want to run the benchmarks on. <pre><code>git clone https://github.com/migraf/fhir-kindling.git\n</code></pre> The <code>benchmarks</code> directory contains a <code>docker-compose.yml</code> file that starts a Blaze, HAPI, and Linux4Health FHIR server. Start the servers using docker compose <pre><code>docker compose up -d\n</code></pre></p> <p>If not already installed, install <code>fhir-kindling</code> with the ds extras <pre><code>pip install fhir-kindling[ds]\n</code></pre></p> <p>Or install using poetry (recommended) in the root directory of the repository <pre><code>poetry install --extras ds\n</code></pre></p> <p>These servers are configured by default in the <code>benchmark_servers.py</code> script. If you want to add your own server, you can do so by adding it to the <code>servers</code> list in the script.</p> <p>Run the benchmark script <pre><code>python benchmark_servers.py\n</code></pre></p>"},{"location":"benchmark/#configuring-the-benchmark","title":"Configuring the benchmark","text":"<p>There are multiple configuration options to adapt the benchmark to your needs.</p> <ul> <li>You can modify the number of resources and attempts the benchmark makes.</li> <li>You can select which steps to run in case you dont want to run the full suite</li> <li>You can add your own custom search queries to be evaluated against the servers</li> </ul>"},{"location":"benchmark/#size-and-number-of-attempts","title":"Size and number of attempts","text":"<p>Modify the dataset size and the number of attempts made for each step in the benchmark by settings the <code>dataset_size</code> and <code>n_attempts</code> variables on the <code>ServerBenchmark</code> instance. (Keep in mind that the dataset size changes with approximately a factor of 10 based on the parameter given in the <code>dataset_size</code> variable.)</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir_kindling.benchmark import ServerBenchmark\n\nservers = [FhirServer(api_adress=\"http://localhost:9090/fhir\")\")]\nbenchmark = ServerBenchmark(\n    servers=servers,\n    dataset_size=1000,\n    n_attempts=3,\n)\n</code></pre>"},{"location":"benchmark/#steps-and-custom-queries","title":"Steps and custom queries","text":"<p>By passing a list of steps (<code>generate</code>, <code>query</code>, <code>insert</code>, <code>dataset_insert</code>, <code>update</code>, <code>delete</code>) to the <code>steps</code> parameter you can select which steps to run in the benchmark. You can run your own queries by passing either FHIR REST query strings or <code>FhirQueryParameter</code> objects to the <code>custom_queries</code> parameter.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir_kindling.benchmark import ServerBenchmark\n\nservers = [FhirServer(api_adress=\"http://localhost:9090/fhir\")\")]\nbenchmark = ServerBenchmark(\n    servers=servers,\n    steps=[\"generate\", \"dataset_insert\", \"query\"],\n    custom_queries=[\"Condition?_count=1000\", \"Observation?_count=10000\"],\n)\n</code></pre>"},{"location":"benchmark/#api-reference","title":"API Reference","text":""},{"location":"benchmark/#fhir_kindling.benchmark.bench.ServerBenchmark.results","title":"<code>results</code>  <code>property</code> <code>readonly</code>","text":"<p>Retunrs the results of the benchmark if the benchmark has completed.</p> <p>Exceptions:</p> Type Description <code>Exception</code> <p>If the benchmark has not completed</p> <p>Returns:</p> Type Description <p>The results of the benchmark</p>"},{"location":"benchmark/#fhir_kindling.benchmark.bench.ServerBenchmark.__init__","title":"<code>__init__(self, servers, server_names=None, n_attempts=20, batch_size=100, dataset_size=1000, custom_queries=None, steps=None)</code>  <code>special</code>","text":"<p>Initialize a benchmark object to test the performance of a set of servers.</p> <p>Parameters:</p> Name Type Description Default <code>servers</code> <code>List[fhir_kindling.fhir_server.fhir_server.FhirServer]</code> <p>List of servers to benchmark.</p> required <code>server_names</code> <code>Optional[List[str]]</code> <p>Optionally provide a list of names for the servers. Which will be used in the results. Defaults to the servers api address.</p> <code>None</code> <code>n_attempts</code> <code>int</code> <p>The number of attempts for each operation. Defaults to N_ATTEMPTS.</p> <code>20</code> <code>batch_size</code> <code>int</code> <p>The size of the batches for evaluating batch operations. Defaults to BATCH_SIZE.</p> <code>100</code> <code>dataset_size</code> <code>int</code> <p>The number of base resources in the dataset. Defaults to 1000.</p> <code>1000</code> <code>custom_queries</code> <code>Optional[List[Tuple[str, Union[str, fhir_kindling.fhir_query.query_parameters.FhirQueryParameters]]]]</code> <p>A list of custom FHIR search queries to be included in the benchmark. Defaults to None.</p> <code>None</code> <code>steps</code> <code>List[Union[str, fhir_kindling.benchmark.constants.BenchmarkOperations]]</code> <p>Select a subset of the steps to run. Defaults to None.</p> <code>None</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the number of server names does not match the number of servers.</p>"},{"location":"benchmark/#fhir_kindling.benchmark.bench.ServerBenchmark.plot","title":"<code>plot(self)</code>","text":"<p>Plot the results of the benchmark</p> <p>Returns:</p> Type Description <p>The plotly figure displaying the results</p>"},{"location":"benchmark/#fhir_kindling.benchmark.bench.ServerBenchmark.run_suite","title":"<code>run_suite(self, progress=True, save=True, results_dir=None)</code>","text":"<p>Run the the test suite configured for this benchmark instance. By default the steps are: Dataset generation, single resource insert, batch insert, dataset upload, search, update and delete.</p> <p>Parameters:</p> Name Type Description Default <code>progress</code> <code>bool</code> <p>Wether to visualize progress using a progress bar. Defaults to True.</p> <code>True</code> <code>save</code> <code>bool</code> <p>Save the results to file once the suite is finished. Defaults to True.</p> <code>True</code> <code>results_dir</code> <code>str</code> <p>Directory in which to save the results. If None defaults to current working directory.</p> <code>None</code>"},{"location":"connect/","title":"Connect to a FHIR server","text":"<p>This page will showcase the different options to connect to the REST API of any FHIR server. In the simplest case (which is not recommended), you can connect to an unsecured REST API by intializing a server object with only base URL.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\n</code></pre>"},{"location":"connect/#connecting-with-basic-auth","title":"Connecting with basic auth","text":"<p>To use basic auth, you need to provide the username and password.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\", username=\"my_username\", password=\"my_password\")\n</code></pre>"},{"location":"connect/#connecting-using-a-static-token","title":"Connecting using a static token","text":"<p>Use a static token to connect to the FHIR server.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\", token=\"my_token\")\n</code></pre>"},{"location":"connect/#connect-using-openid-connect","title":"Connect using OpenID Connect","text":"<p>To use OpenID Connect, you need to provide the client id and client secret, as well as the URL to the OpenID Connect server.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(\"https://fhir.server/fhir\", client_id=\"client_id\", client_secret=\"secret\",\n                         oidc_provider_url=\"url\")\n</code></pre>"},{"location":"connect/#initialization-via-environment-variables","title":"Initialization via environment variables","text":"<p>A connection to the server can be initialized based on environment variables. The keys for the environment variables corresponding to the above described authentication methods are the following:</p> <ul> <li>Basic Auth:<ul> <li><code>FHIR_USER</code></li> <li><code>FHIR_PW</code></li> </ul> </li> <li>Static Token:<ul> <li><code>FHIR_TOKEN</code></li> </ul> </li> <li>OIDC:<ul> <li><code>CLIENT_ID</code></li> <li><code>CLIENT_SECRET</code></li> <li><code>OIDC_PROVIDER_URL</code></li> </ul> </li> </ul> <p>Note</p> <p>Make sure only one of the options is present in the environment. Otherwise, the connection will fail.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer.from_env()\n</code></pre>"},{"location":"connect/#advanced-connection-options","title":"Advanced connection options","text":""},{"location":"connect/#headers-proxies","title":"Headers &amp; Proxies","text":"<p>Additional headers can be added to the request by setting the <code>headers</code> parameter when initializing the server object. The <code>proxies</code> parameter can be used to set proxies for the requests.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\", headers={\"X-My-Header\": \"my_value\"},\n                         proxies={\"http\": \"http://proxy.example.com:8080\"})\n</code></pre>"},{"location":"connect/#retrying-request","title":"Retrying request","text":"<p>By default all requests against a FHIR server that fail will raise an exception. This can be changed by setting either the <code>retry_status_codes</code> or <code>retryable_methods</code> when initializing the server object. The <code>retry_status_codes</code> is a list of status codes that should be retried. The <code>retryable_methods</code> is a list of HTTP methods that should be retried.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\", retry_status_codes=[500, 502, 503, 504])\n</code></pre>"},{"location":"connect/#retry-configuration","title":"Retry configuration","text":"<p>The default retry configuration is to retry 5 times with an exponential backoff. This can be changed by setting additional configuration parameters when initializing the server object. Read more about backoff and jitter here.</p> <pre><code>from fhir_kindling import FhirServer\n\nfhir_server = FhirServer(\n    api_address=\"http://fhir.example.com/R4\",\n    retry_status_codes=[500, 502, 503, 504],            \n    retry_backoff_factor=0.5, \n    max_attempts=10, \n    max_backoff_wait=60\n)\n</code></pre>"},{"location":"delete/","title":"Delete resources","text":"<p>Deleting resources from the server can be achieved with the <code>delete()</code> and <code>delete_async()</code> methods of the <code>FhirServer</code> class. </p> <p>These methods accept either a list of references in the format <code>[ResourceType]/[id]</code> or a list of <code>fhir.resources</code> objects that are required to have a server assigned <code>id</code> and <code>resource_type</code> attribute.</p> <p>Note</p> <p>As with all the methods of the library, there are asynchronous and synchronous versions of the methods presented here. Simply add the <code>await</code> keyword and append <code>_async</code> to the method name to use the asynchronous version.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.patient import Patient\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\n\n# delete by list of references\ndelete_list = [\"Patient/123\", \"Patient/456\", \"Patient/789\"]\nfhir_server.delete(references=delete_list)\n\n# delete resources by list of fhir.resources objects\npatient = Patient(id=\"123\", resource_type=\"Patient\")\nfhir_server.delete(resources=[patient])\n</code></pre>"},{"location":"delete/#delete-api","title":"Delete API","text":""},{"location":"delete/#fhir_kindling.fhir_server.fhir_server.FhirServer.delete","title":"<code>delete(self, resources=None, references=None, query=None)</code>","text":"<p>Delete resources from the server. Either resources, references or a query must be specified.</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, dict]]</code> <p>Resources coming from the server containing an id to delete</p> <code>None</code> <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>references {Resource}/{id} to delete</p> <code>None</code> <code>query</code> <code>FhirQuerySync</code> <p>query to use to find resources to delete</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"delete/#fhir_kindling.fhir_server.fhir_server.FhirServer.delete_async","title":"<code>delete_async(self, resources=None, references=None, query=None)</code>  <code>async</code>","text":"<p>Asynchronously delete resources from the server. Either resources, references or a query must be specified.</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, dict]]</code> <p>Resources coming from the server containing an id to delete</p> <code>None</code> <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>references {Resource}/{id} to delete</p> <code>None</code> <code>query</code> <code>FhirQueryAsync</code> <p>query to use to find resources to delete</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"ds/","title":"Data Science","text":""},{"location":"ds/#serialization","title":"Serialization","text":"<p>Parsing fhir bundles and resources into a tabular format can be achieved by the flattening the resources in the bundle. Since a bundle can contain multiple different resources, the parse currently creates columns for the field of each resource if they do not yet exist. If a column already exists then it can be used otherwise it will be created.</p>"},{"location":"query/","title":"Query a server","text":"<p>Querying a FHIR server a FHIR server for resources is done using the <code>query()</code> method of the <code>FhirServer</code> class. As with all methods of the <code>FhirServer</code> class, the <code>query()</code> method can be used in both synchronous and asynchronous (<code>query_async</code>) modes.</p>"},{"location":"query/#quick-start","title":"Quick start","text":"<p>Use the <code>query()</code> (or <code>query_async()</code>) method with the name of the resource to query a FHIR server for the resources of that type. This will return a <code>Query</code> object which can be used to further refine the query and execute it against the server.</p> <pre><code>from fhir_kindling import FhirServer\n\n# Initialize the client and query instance with a string defining the name of the resource\nserver = FhirServer(api_address=\"http://fhirtest.uhn.ca/R4\")\nquery = server.query(resource=\"Patient\")\n# optionally add conditions by which to filter the requested resources\nquery = query.where({\"active\": True})\n\n# Finally execute the query against the server and return the query results\nresults = query.all()\n\n# In asynchronous mode, the query is create using query_async and executed with the `await` keyword\nasync_query = server.query_async(resource=\"Patient\")\nasync_results = await async_query.all()\n</code></pre>"},{"location":"query/#building-a-query","title":"Building a query","text":"<p>This section will walk you through the different ways of creating and modifying a query using the kindling library.</p> <p>Note</p> <p>Remember to use the <code>query_async()</code> method in an asynchronous context. Everything else works exactly the same.</p>"},{"location":"query/#ways-to-define-a-query","title":"Ways to define a query","text":"<p>Fhir kindling supports three ways of defining a query:</p> <ul> <li>iteratively building the query by starting with base resource and using the    <code>query(resource=xxx)</code>, <code>where()</code>, <code>include()</code> and <code>has()</code> methods</li> <li>passing an existing FHIR REST API query string to the <code>query(query_string=xxx)</code> method as a string</li> <li>passing FhirQueryParameters to the <code>query(query_parameters=xxxx)</code> method</li> </ul>"},{"location":"query/#specify-base-resource","title":"Specify base resource","text":"<p>The resource to be queried can be specified using the <code>resource</code> parameter of the <code>query()</code> method. This parameter can be either a string or a pydantic model from the fhir.resources library.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.patient import Patient\n\nserver = FhirServer(url=\"http://fhirtest.uhn.ca/R4\")\n# the resource can be specified as a string\nquery = server.query(resource=\"Patient\")\n# or as a pydantic model\nquery = server.query(resource=Patient)\n</code></pre>"},{"location":"query/#passing-an-existing-query-string","title":"Passing an existing query string","text":"<p>An existing query string can be passed to the <code>query()</code> method using the <code>query_string</code> parameter. The query string should be a valid FHIR REST API query string i.e. <code>/Patient?birthDate=gt2000</code>. For more information on how to construct a query string, see the  FHIR search specification. And will be parsed into a <code>FhirQueryParameters</code> object.</p> <pre><code>from fhir_kindling import FhirServer\n\nserver = FhirServer(url=\"http://fhirtest.uhn.ca/R4\")\nquery = server.query(query_string=\"/Patient?birthDate=gt2000\")\n</code></pre>"},{"location":"query/#passing-fhirqueryparameters","title":"Passing FhirQueryParameters","text":"<p>A <code>FhirQueryParameters</code> object can be passed to the <code>query()</code> method using the <code>query_parameters</code> parameter. This object can be constructed manually or by using the <code>FhirQueryParameters.from_query_string()</code> method.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir_kindling.fhir_query import FhirQueryParameters\n\nserver = FhirServer(url=\"http://fhirtest.uhn.ca/R4\")\n# construct the query parameters manually\nquery_parameters = FhirQueryParameters(resource=\"Patient\")\nquery = server.query(query_parameters=query_parameters)\n</code></pre>"},{"location":"query/#add-conditions-to-a-query","title":"Add conditions to a query","text":"<p>FHIR queries can be further refined by adding conditions to the query. These conditions are specified using the <code>where()</code> method and are  evaluated against the fields of the main resource. For detailed documentation on how FHIR Search works, see the  FHIR search specification. Conditions can be added in two ways:</p> <ul> <li>Using the arguments of the <code>where()</code> method: <code>where(field=value1, operator=gt, value=value2)</code></li> <li>Passing <code>FieldParameter</code> as an object or a dictionary to the <code>where()</code> method: <code>where(field_param=FieldParameter(...))</code></li> </ul> <pre><code># server and query initialized the same way as in the previous examples\nfrom fhir_kindling.fhir_query import FieldParameter\n\n# three ways of adding filter conditions\n# adding filter conditions using kv arguments\nquery = query.where(field=\"birthDate\", operator=\"gt\", value=\"1990\")\n# or using a FieldParameter object\nparam = FieldParameter(field=\"birthDate\", operator=\"gt\", value=\"1990\")\nquery = query.where(field_param=param)\n# or using a dictionary\nparam_dict = {\"field\": \"birthDate\", \"operator\": \"gt\", \"value\": \"1990\"}\nquery = query.where(field_param=param_dict)\n</code></pre> <p>Note</p> <p>To see the current state of the query check either the <code>query_string</code> or <code>query_parameters</code> attributes of the <code>FhirQuery</code> object.</p>"},{"location":"query/#include-related-resources","title":"Include related resources","text":"<p>Related resources can be included in the response by using the <code>include()</code> method. For more information on how relations work in the FHIR specification, see the FHIR search specification.</p> <p>Regular include i.e. include <code>Condition</code> resources related to the <code>Patient</code> resource: <pre><code># server initialized the same way as in the previous examples\nquery = server.query(resource=\"Patient\")\nquery = query.include(resource=\"Condition\", reference_param=\"subject\")\n</code></pre></p> <p>An example for reverse include would be to include the <code>Organization</code> resource related to the <code>Patient</code> resource. I.e. like this: <pre><code># server initialized the same way as in the previous examples\n\nquery = server.query(resource=\"Patient\")\nquery = query.include(resource=\"Organization\", reference_param=\"managingOrganization\", reverse=True)\n</code></pre></p>"},{"location":"query/#filter-based-on-related-resources","title":"Filter based on related resources","text":"<p>To filter based on related resources, the <code>has()</code> method can be used. This could mean for example querying only for  patients that have a specific Condition. For more information on how this works, see the FHIR search specification.  Once again this method can be used in two ways:</p> <ul> <li>Using the arguments of the <code>has()</code> method: <code>has(resource=xxx, reference_param=yyy, search_param=zzz, operator=eq, value=aaa)</code></li> <li>Passing <code>ReverseChainParameter</code> as an object or a dictionary to the <code>has()</code> method: <code>has(has_param=HasParameter(...))</code></li> </ul> <pre><code># server + query initialized the same way as in the previous examples\nfrom fhir_kindling.fhir_query import ReverseChainParameter\n# using kv arguments\nquery = query.has(resource=\"Condition\", reference_param=\"subject\", search_param=\"code\", operator=\"eq\", value=\"123\")\n\n# using a ReverseChainParameter object\nparam = ReverseChainParameter(resource=\"Condition\", reference_param=\"subject\", search_param=\"code\", operator=\"eq\", value=\"123\")\nquery = query.has(has_param=param)\n</code></pre>"},{"location":"query/#executing-the-query","title":"Executing the query","text":"<p>Note</p> <p>Remember to add the <code>await</code> keyword when the query was created using the <code>query_async()</code> method.</p> <p>The query is executed against the server using on of the following methods:</p> <ul> <li><code>all()</code> - returns all resources matching the query</li> <li><code>first()</code> - returns the first resource matching the query</li> <li><code>limit(n=k)</code> - returns the first <code>k</code> resources matching the query</li> <li><code>count()</code> - returns the number of resources matching the query</li> </ul> <pre><code># query initialized the same way as in the previous examples\n\n# get all resources matching the query\nresponse = query.all()\n# In asynchronous mode, the query is create using query_async and executed with the `await` keyword\nresponse = await query.all()\n\n# limit the number of returned resources\nresponse = query.limit(n=10)\n# get the first resource\nresponse = query.first()\n# count the number of resources matching the query\nresponse = query.count()\n</code></pre>"},{"location":"query/#working-with-the-response","title":"Working with the response","text":"<p>If the query succeeded, the response will a <code>QueryResponse</code> object. This object contains the following attributes:</p> <ul> <li><code>status_code</code> - the status code of the response</li> <li><code>resources</code> - a list of resources of the main resource type matching the query</li> <li><code>included_resources</code> - If the query was configured to include related resources, these are returned in this     attribute. List of object containing included resources separated by resource type.</li> <li><code>total</code> - the total number of resources matching the query</li> </ul> <pre><code># query initialized the same way as in the previous examples\n\n# get all resources matching the query\nresponse = query.all()\nprint(response.status_code)\nprint(response.resources)\nprint(response.included_resources)\n</code></pre>"},{"location":"query/#saving-the-response-to-a-file","title":"Saving the response to a file","text":"<p>The response can be saved to disk as a bundle using the <code>save()</code> method. The method accepts the following parameters:</p> <ul> <li><code>file_path</code> - the path to the file to save the response to</li> <li><code>output_format</code> - the format to save the response in. Can be either <code>json</code> or <code>xml</code>. Default is <code>json</code></li> </ul> <pre><code># query initialized the same way as in the previous examples\nresponse = query.all()\n# save the response to a file\nresponse.save(file_path=\"response.json\")\n# save the response to a file in xml format\nresponse.save(file_path=\"response.xml\", output_format=\"xml\")\n</code></pre>"},{"location":"query/#get-resources-by-reference","title":"Get resources by reference","text":"<p>Resources can be retrieved by their reference using the <code>get()</code> and <code>get_many()</code> methods. Given a reference or a list of references, the method will return the corresponding resource or list of resources.</p> <p>Getting a single resource: <pre><code># server initialized the same way as in the previous examples\n\n# a single reference\npatient_ref = \"Patient/123\"\n# returns a single resource\npatient = server.get(patient_ref)\n\n# get many resources\npatient_refs = [\"Patient/123\", \"Patient/456\"]\n# returns a list of resources\npatients = server.get_many(patient_refs)\n</code></pre></p>"},{"location":"query/#query-api","title":"Query API","text":""},{"location":"query/#fhir_kindling.fhir_server.fhir_server.FhirServer.get","title":"<code>get(self, reference)</code>","text":"<p>Get a resource from the server specified by the given reference {ResourceType}/{id}</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>Union[str, fhir.resources.reference.Reference]</code> <p>reference to the resource, either a Reference object or a string of the form {ResourceType}/{id}</p> required <p>Returns:</p> Type Description <code>FHIRAbstractModel</code> <p>the resource from the server specified by the reference</p>"},{"location":"query/#fhir_kindling.fhir_server.fhir_server.FhirServer.get_many","title":"<code>get_many(self, references)</code>","text":"<p>Get a list of resources from the server specified by the given references</p> <p>Parameters:</p> Name Type Description Default <code>references</code> <code>List[Union[str, fhir.resources.reference.Reference]]</code> <p>list of references to the resources, either a Reference object or a string of the form <code>{ResourceType}/{id}</code></p> required <p>Returns:</p> Type Description <code>List[fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]</code> <p>list of resources corresponding to the references</p>"},{"location":"query/#fhir_kindling.fhir_server.fhir_server.FhirServer.query","title":"<code>query(self, resource=None, query_string=None, query_parameters=None, output_format='json')</code>","text":"<p>Initialize a FHIR query against the server with the given resource, query parameters or query string</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>the output format to request from the fhir server (json or xml) defaults to json</p> <code>'json'</code> <code>query_string</code> <code>str</code> <p>preformatted query string to execute against the servers REST API</p> <code>None</code> <code>query_parameters</code> <code>FhirQueryParameters</code> <p>optionally pass in a query parameters object to use for the query</p> <code>None</code> <code>resource</code> <code>Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, str]</code> <p>the FHIR resource to query from the server</p> <code>None</code> <p>Returns:</p> Type Description <code>FhirQuerySync</code> <p>a FhirQuerySync object that can be further modified with filters and conditions before being executed against the server</p>"},{"location":"query/#fhir_kindling.fhir_server.fhir_server.FhirServer.query_async","title":"<code>query_async(self, resource=None, query_string=None, query_parameters=None, output_format='json')</code>","text":"<p>Initialize an asynchronous FHIR query against the server with the given resource, query parameters or query string</p> <p>Parameters:</p> Name Type Description Default <code>output_format</code> <code>str</code> <p>the output format to request from the fhir server (json or xml) defaults to json</p> <code>'json'</code> <code>query_string</code> <code>str</code> <p>preformatted query string to execute against the servers REST API</p> <code>None</code> <code>query_parameters</code> <code>FhirQueryParameters</code> <p>optionally pass in a query parameters object to use for the query</p> <code>None</code> <code>resource</code> <code>Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel, str]</code> <p>the FHIR resource to query from the server</p> <code>None</code> <p>Returns:</p> Type Description <code>FhirQueryAsync</code> <p>a FhirQueryAsync object that can be further modified with filters and conditions before being executed against the server</p>"},{"location":"transfer/","title":"Transfer resources","text":"<p>Transfering resources between different fhir servers was the original reason for the creation of this library. In the FHIR format this poses significant challenges as referential integrity is strictly enforced and batched transaction do not autmatically resolve the order of object creation and server generate id assignment. </p> <p>To solve this problem the <code>FhirServer</code> class has a <code>transfer()</code> method that can be used to transfer resources from one server to another. This method accepts either a list of <code>fhir.resources</code> objects that are required to have a server assigned <code>id</code> and <code>resource_type</code> attribute or a <code>FhirQuery</code> object whose results should be transfered. Additionally, the <code>transfer()</code> method accepts a <code>target_server</code> argument that is a <code>FhirServer</code> object that represents the server to which the resources should be transfered.</p> <p>In the default configuration the provided resources (either the list or the results of the executed query) are then analyzed for missing references. If any are found, the <code>FhirServer</code> will attempt to resolve them by querying the source server for the missing resources. If the missing resources are found, a DAG is created that represents the order in which the resources should be created on the target server. This DAG is then used to create the resources on the target server in the correct order keeping the referential integrity intact.</p>"},{"location":"transfer/#record-linkage","title":"Record Linkage","text":"<p>The <code>transfer()</code> method also supports record linkage. In this case this means that while transfering the newly created reference for the transfered resource will be stored in a dictionary with the hashed original reference as key. This allows back linkage from the transfered data to the data in the potentially sensitive source server with out comprosing any IDs.</p>"},{"location":"transfer/#example-usage","title":"Example Usage","text":"<p>This example will show the transfer of the first 100 conditions from one server to another. While also transfering all referenced Patient resources </p> <pre><code>from fhir_kindling import FhirServer\n\nsrc_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\ntarget_server = FhirServer(api_address=\"http://fhir-2.example.com/R4\")\n\n# Get a list of 100 conditions\npatients = src_server.query(\"Conditions\").limit(100).resources\n\n# Transfer the conditions to the target server\n# this will also transfer all referenced resources (Patient, Observation, etc.)\ntransfer_response = src_server.transfer(resources=patients, target_server=target_server)\nprint(transfer_response)\n</code></pre>"},{"location":"transfer/#transfer-api","title":"Transfer API","text":""},{"location":"transfer/#fhir_kindling.fhir_server.fhir_server.FhirServer.transfer","title":"<code>transfer(self, target_server, query=None, resources=None, get_missing=True, record_linkage=True, display=False)</code>","text":"<p>Transfer resources from this server to another server while using server assigned ids and keeping referential integrity.</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>FhirServer</code> <p>FhirServer to transfer to</p> required <code>query</code> <code>FhirQuerySync</code> <p>FhirQuerySync to use to find resources to transfer</p> <code>None</code> <code>resources</code> <code>List[Union[fhir.resources.resource.Resource, fhir.resources.core.fhirabstractmodel.FHIRAbstractModel]]</code> <p>list of resources to transfer</p> <code>None</code> <code>get_missing</code> <code>bool</code> <p>whether to get missing references from the source server</p> <code>True</code> <code>record_linkage</code> <code>bool</code> <p>whether to record the linkage between the source and target server</p> <code>True</code> <code>display</code> <code>bool</code> <p>whether to display the progress bar</p> <code>False</code> <p>Returns:</p> Type Description <code>TransferResponse</code> <p>Transfer response for the transfer of the query result to the target server</p>"},{"location":"update/","title":"Update resources","text":"<p>Updating resource on the server is done with the <code>update()</code> and <code>update_async()</code> methods of the <code>FhirServer</code> class. These methods accept a list of <code>fhir.resources</code> objects that are required to have a server assigned <code>id</code> and <code>resource_type</code> attribute. These resources are then updated on the server using a batch transaction.</p> <p>Note</p> <p>As with all the methods of the library, there are asynchronous and synchronous versions of the methods presented here. Simply add the <code>await</code> keyword and append <code>_async</code> to the method name to use the asynchronous version.</p> <pre><code>from fhir_kindling import FhirServer\nfrom fhir.resources.patient import Patient\n\nfhir_server = FhirServer(api_address=\"http://fhir.example.com/R4\")\n# Get a list of 100 patients\npatients = server.query(\"Patient\").limit(100).resources\n\n# Update the first name of all patients\nfor patient in patients:\n    patient.name[0].given[0] = \"John\"\n\n# Update the patients on the server\nupdate_response = fhir_server.update(resources=patients)\nprint(update_response)\n</code></pre>"},{"location":"update/#update-api","title":"Update API","text":""},{"location":"update/#fhir_kindling.fhir_server.fhir_server.FhirServer.update","title":"<code>update(self, resources)</code>","text":"<p>Update a list of resources that exist on the server</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[Union[fhir.resources.fhirresourcemodel.FHIRResourceModel, dict]]</code> <p>List of updated resources coming to send to the server</p> required <p>Returns: Bundle update response from the fhir server</p>"}]}